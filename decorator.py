passw = input('Введите пароль: ')
# Это фабрика декораторов. Она принимает пароль 'p' в качестве аргумента.
def test_passw(p):
    # Это сам декоратор. Он принимает функцию 'f', которую нужно декорировать.
    def deco(f):
        # Проверяем, совпадает ли введенный пароль 'p' с '10'.
        if p == '10':
            # Если пароль верный, возвращаем исходную функцию 'f' без изменений.
            return f
        else:
            # Если пароль неверный, возвращаем новую функцию (lambda),
            # которая при вызове вернет 'Доступ закрыт'.
            return lambda: 'Доступ закрыт'
    # Фабрика декораторов возвращает сам декоратор 'deco'.
    return deco
# Применяем декоратор к функции 'func'.
# Сначала вызывается test_passw(passw), который возвращает декоратор 'deco'.
# Затем 'deco' вызывается с 'func' в качестве аргумента (deco(func)).
# Результат этого вызова (либо исходная 'func', либо lambda) заменяет оригинальную 'func'.
@test_passw(passw)
def func():
    return 'Доступ открыт'
# Вызываем декорированную (или замененную) функцию 'func'.
print(func())

'''Представь, что декоратор — это такой "охранник" для твоей функции.
test_passw(passw): Сначала ты создаешь этого "охранника" и даешь ему пароль (passw), который ввел пользователь. 
Эта функция (test_passw) сама по себе еще не охранник, а скорее "инструкция по созданию охранника". 
Она возвращает настоящего "охранника" — функцию deco.
@test_passw(passw) над def func():: Эта строчка говорит: "Эй, возьми функцию func и передай ее "охраннику", которого мы только что создали".
Внутри "охранника" (deco):
"Охранник" (deco) берет твою функцию func.
Он смотрит на пароль, который ты ему дал при создании.
Если пароль верный (равен '10'): "Охранник" говорит: "Все в порядке, проходи!" и возвращает твою оригинальную функцию func без изменений.
Если пароль неверный: "Охранник" говорит: "Доступ запрещен!" и вместо твоей оригинальной функции func он подсовывает тебе другую, 
очень простую функцию, которая всегда будет говорить "Доступ закрыт".
print(func()): Теперь, когда ты вызываешь func(), ты на самом деле вызываешь то, что вернул "охранник":
Либо твою оригинальную функцию (если пароль был верный), и она напечатает "Доступ открыт".
Либо подставную функцию (если пароль был неверный), и она напечатает "Доступ закрыт".
Проще говоря: Декоратор @test_passw(passw) "оборачивает" твою функцию func. В зависимости от пароля, он либо позволяет func работать как обычно, 
либо заменяет её на другую функцию, которая блокирует доступ. Это способ добавить дополнительную логику (проверку пароля) к функции, 
не меняя код самой функции func.'''